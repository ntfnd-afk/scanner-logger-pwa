import { put, getAll } from '../db/index.js';
import { APP, setStatePill, render } from '../state/appState.js';

let syncInFlight = false;
const MAX_BATCH = 20;
const MAX_RETRIES = 3;
const RETRY_DELAY = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

export async function syncNow(){
  if(syncInFlight) {
    console.log('‚è≥ Sync already in progress, skipping...');
    return;
  }
  if(!APP.state.syncUrl){ alert('–£–∫–∞–∂–∏—Ç–µ SYNC_URL –≤ –º–µ–Ω—é.'); return; }
  
  setStatePill('warn','SYNC');
  const statusMeta=document.querySelector('#statusMeta');
  if(statusMeta) statusMeta.textContent='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
  
  const all=await getAll(APP.db,'events');
  let unsent=all.filter(r=>!r.synced);
  
  if(unsent.length===0){ 
    setStatePill('ok','IDLE'); 
    if(statusMeta) statusMeta.textContent='–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'; 
    return; 
  }
  
  console.log(`üì§ Starting sync: ${unsent.length} unsent events (batch size: ${MAX_BATCH})`);
  
  if(unsent.length>MAX_BATCH) {
    console.warn(`‚ö†Ô∏è Too many unsent events (${unsent.length}), sending first ${MAX_BATCH}`);
    unsent=unsent.slice(0,MAX_BATCH);
  }
  
  try{
    syncInFlight=true;
    const apiUrl=APP.state.syncUrl || 'https://scanner-api.fulfilment-one.ru';
    const apiKey=APP.state.apiKey || 'ihkLCIfVDynpEcr14NxuO8ZBWKHzMU60';
    
    console.log(`üåê Syncing to: ${apiUrl}/api/v1/events/batch`);
    
    // –§–æ—Ä–º–∞—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ FastAPI –±—ç–∫–µ–Ω–¥–∞
    const events=unsent.map(r=>({
      uuid:r.uuid,
      ts:r.timestamp,  // API –æ–∂–∏–¥–∞–µ—Ç 'ts', –∞ –Ω–µ 'timestamp'
      type:r.type,
      operator:r.operator,
      client:r.client||'',
      city:r.city||'',
      box:r.box||'',
      code:r.code||'',
      source:'pwa',
      details:r.details||''
    }));
    
    let lastError = null;
    let resp = null;
    let data = null;
    
    // –ü–æ–ø—ã—Ç–∫–∏ —Å retry
    for(let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
      try {
        if(attempt > 1) {
          console.log(`üîÑ Retry attempt ${attempt}/${MAX_RETRIES} after ${RETRY_DELAY}ms...`);
          await sleep(RETRY_DELAY);
          if(statusMeta) statusMeta.textContent=`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_RETRIES}...`;
        }
        
        const startTime = Date.now();
        
        resp = await fetch(`${apiUrl}/api/v1/events/batch`, {
          method:'POST',
          headers:{
            'Content-Type':'application/json',
            'X-API-Key':apiKey
          },
          body:JSON.stringify({events:events}),  // API –æ–∂–∏–¥–∞–µ—Ç {events: [...]}
          signal: AbortSignal.timeout(10000)  // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        
        const duration = Date.now() - startTime;
        console.log(`‚è±Ô∏è Request took ${duration}ms (attempt ${attempt})`);
        
        if(!resp.ok){
          const errorText=await resp.text();
          console.error(`‚ùå HTTP ${resp.status}:`, errorText);
          
          // –ù–µ —Ä–µ—Ç—Ä–∞–∏–º 4xx –æ—à–∏–±–∫–∏ (–∫—Ä–æ–º–µ 429 - rate limit)
          if(resp.status >= 400 && resp.status < 500 && resp.status !== 429) {
            throw new Error(`HTTP ${resp.status}: ${errorText.substring(0, 200)}`);
          }
          
          lastError = new Error(`HTTP ${resp.status}: ${errorText.substring(0, 200)}`);
          continue; // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        }
        
        data = await resp.json();
        console.log('üìä Response:', data);
        
        // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        break;
        
      } catch(e) {
        lastError = e;
        console.warn(`‚ö†Ô∏è Attempt ${attempt} failed:`, e.message);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º
        if(attempt === MAX_RETRIES || e.message.includes('401') || e.message.includes('403')) {
          throw e;
        }
      }
    }
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    if(!data) {
      throw lastError || new Error('Failed to sync after all retries');
    }
    
    if(!data.ok){ 
      console.error('‚ùå Sync failed:', data.errors);
      throw new Error(data.errors?.join(', ')||'Sync failed'); 
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if(data.errors && data.errors.length > 0){
      console.warn('‚ö†Ô∏è Sync warnings:', data.errors);
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ)
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã - –æ–Ω–∏ —Ç–æ–∂–µ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ synced (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
    for(const r of unsent){ r.synced=true; await put(APP.db,'events',r); }
    APP.state.lastSync=Date.now(); 
    APP.state.lastSyncError=false; 
    setStatePill('ok','IDLE');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log(`‚úÖ Sync complete: ${data.inserted} inserted, ${data.skipped} skipped (duplicates)`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º firstUnsentTs
    if(window.resetFirstUnsentTs) window.resetFirstUnsentTs();
    
    if(statusMeta) statusMeta.textContent=`‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${data.inserted} –Ω–æ–≤—ã—Ö`;
    
  }catch(e){ 
    console.error('‚ùå Sync error:', e);
    console.error('Error details:', {
      name: e.name,
      message: e.message,
      stack: e.stack
    });
    
    APP.state.lastSyncError=true; 
    setStatePill('error','SYNC ERR');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if(statusMeta) {
      if(e.name === 'TimeoutError' || e.message.includes('timeout')) {
        statusMeta.textContent='‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      } else if(e.message.includes('Failed to fetch') || e.message.includes('NetworkError')) {
        statusMeta.textContent='‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
      } else if(e.message.includes('401')) {
        statusMeta.textContent='‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (API Key)';
      } else if(e.message.includes('500')) {
        statusMeta.textContent='‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
      } else {
        statusMeta.textContent=`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${e.message.substring(0, 50)}`;
      }
    }
  }
  finally{ 
    syncInFlight=false; 
    render(); 
  }
}

