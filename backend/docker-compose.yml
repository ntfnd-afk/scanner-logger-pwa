version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: scanner-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: scanner_logger
      POSTGRES_USER: scanner
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scanner -d scanner_logger"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scanner-net

  # Redis (опционально, для кэширования)
  redis:
    image: redis:7-alpine
    container_name: scanner-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - scanner-net

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scanner-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://scanner:${DATABASE_PASSWORD:-changeme}@postgres:5432/scanner_logger
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4 --log-level info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scanner-net

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: scanner-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      # Если нужно раздавать PWA статику с этого же сервера
      # - ../index.html:/usr/share/nginx/html/index.html:ro
      # - ../assets:/usr/share/nginx/html/assets:ro
    depends_on:
      - backend
    networks:
      - scanner-net

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  scanner-net:
    driver: bridge

