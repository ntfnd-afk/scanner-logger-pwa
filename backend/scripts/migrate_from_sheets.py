"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ PostgreSQL
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/migrate_from_sheets.py \
        --spreadsheet-id "1MOvQCiWBY4FE8K8NOWU7x2nMm-4H0NMoTqUuBOnVye4" \
        --credentials credentials.json \
        --database-url "postgresql+asyncpg://scanner:password@localhost:5432/scanner_logger"
"""
import asyncio
import argparse
import sys
import os
from datetime import datetime
from typing import List, Dict
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
import uuid as uuid_lib

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ app –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.models.event import Event
from app.database import Base


# –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ Google Sheets: dd.MM.yyyy HH:mm:ss
SHEETS_DATE_FORMAT = "%d.%m.%Y %H:%M:%S"


def parse_sheets_datetime(date_str: str) -> datetime:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ Google Sheets —Ñ–æ—Ä–º–∞—Ç–∞: dd.MM.yyyy HH:mm:ss
    """
    if not date_str or date_str.strip() == '':
        return datetime.now()
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ datetime –æ–±—ä–µ–∫—Ç (–µ—Å–ª–∏ Sheets –≤–µ—Ä–Ω—É–ª Date)
        if isinstance(date_str, datetime):
            return date_str
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏
        return datetime.strptime(date_str.strip(), SHEETS_DATE_FORMAT)
    except Exception as e:
        print(f"‚ö†Ô∏è  Warning: Cannot parse date '{date_str}': {e}")
        return datetime.now()


def parse_uuid(uuid_str: str) -> uuid_lib.UUID:
    """–ü–∞—Ä—Å–∏–Ω–≥ UUID —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        return uuid_lib.UUID(uuid_str)
    except (ValueError, AttributeError):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ UUID –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π
        return uuid_lib.uuid4()


async def migrate_sheet_to_db(
    worksheet,
    session: AsyncSession,
    dry_run: bool = False
) -> Dict:
    """
    –ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ (–º–µ—Å—è—Ü–∞) –≤ PostgreSQL
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    """
    stats = {
        'total': 0,
        'inserted': 0,
        'skipped': 0,
        'errors': 0,
        'sheet_name': worksheet.title
    }
    
    print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: {worksheet.title}")
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞
    all_values = worksheet.get_all_values()
    
    if not all_values or len(all_values) < 2:
        print(f"‚ö†Ô∏è  –õ–∏—Å—Ç {worksheet.title} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return stats
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = all_values[0]
    rows = all_values[1:]
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
    col_map = {h: i for i, h in enumerate(headers)}
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}")
    print(f"üìå –ö–æ–ª–æ–Ω–∫–∏: {', '.join(headers)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö UUID –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    existing_uuids = set()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
    events_to_insert = []
    
    for row_idx, row in enumerate(rows, start=2):  # +2 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ 1-based –∏–Ω–¥–µ–∫—Å–∞
        stats['total'] += 1
        
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑ —Å—Ç—Ä–æ–∫–∏
            uuid_str = row[col_map['uuid']] if 'uuid' in col_map else ''
            ts_str = row[col_map['ts']] if 'ts' in col_map else ''
            type_str = row[col_map['type']] if 'type' in col_map else ''
            operator = row[col_map['operator']] if 'operator' in col_map else ''
            client = row[col_map['client']] if 'client' in col_map else ''
            city = row[col_map['city']] if 'city' in col_map else ''
            box = row[col_map['box']] if 'box' in col_map else ''
            code = row[col_map['code']] if 'code' in col_map else ''
            details = row[col_map.get('details', -1)] if 'details' in col_map else ''
            received_at_str = row[col_map.get('receivedAt', -1)] if 'receivedAt' in col_map else ts_str
            source = row[col_map.get('source', -1)] if 'source' in col_map else 'pwa'
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not uuid_str or not ts_str or not type_str or not operator:
                print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {row_idx}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)")
                stats['skipped'] += 1
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ UUID
            event_uuid = parse_uuid(uuid_str)
            uuid_str_normalized = str(event_uuid)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞
            if uuid_str_normalized in existing_uuids:
                stats['skipped'] += 1
                continue
            
            existing_uuids.add(uuid_str_normalized)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
            ts_dt = parse_sheets_datetime(ts_str)
            received_at_dt = parse_sheets_datetime(received_at_str) if received_at_str else ts_dt
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Event
            event = Event(
                uuid=event_uuid,
                ts=ts_dt,
                type=type_str,
                operator=operator,
                client=client or None,
                city=city or None,
                box=box or None,
                code=code or None,
                details=details or None,
                received_at=received_at_dt,
                source=source or 'pwa'
            )
            
            events_to_insert.append(event)
            stats['inserted'] += 1
            
            # Batch insert –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
            if len(events_to_insert) >= 1000 and not dry_run:
                session.add_all(events_to_insert)
                await session.commit()
                print(f"  ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(events_to_insert)} –∑–∞–ø–∏—Å–µ–π...")
                events_to_insert = []
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_idx}: {e}")
            stats['errors'] += 1
            continue
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π
    if events_to_insert and not dry_run:
        session.add_all(events_to_insert)
        await session.commit()
        print(f"  ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(events_to_insert)} –∑–∞–ø–∏—Å–µ–π (—Ñ–∏–Ω–∞–ª)")
    
    print(f"‚úÖ –õ–∏—Å—Ç {worksheet.title} –æ–±—Ä–∞–±–æ—Ç–∞–Ω:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total']}")
    print(f"   –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['inserted']}")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
    print(f"   –û—à–∏–±–æ–∫: {stats['errors']}")
    
    return stats


async def main():
    parser = argparse.ArgumentParser(description="–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ PostgreSQL")
    parser.add_argument('--spreadsheet-id', required=True, help='ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets')
    parser.add_argument('--credentials', required=True, help='–ü—É—Ç—å –∫ credentials.json')
    parser.add_argument('--database-url', required=False, 
                        default='postgresql+asyncpg://scanner:changeme@localhost:5432/scanner_logger',
                        help='Database URL')
    parser.add_argument('--sheet-prefix', default='raw_log_', help='–ü—Ä–µ—Ñ–∏–∫—Å –ª–∏—Å—Ç–æ–≤ (raw_log_)')
    parser.add_argument('--dry-run', action='store_true', help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î (—Ç–µ—Å—Ç)')
    
    args = parser.parse_args()
    
    print("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ PostgreSQL")
    print(f"üìä Spreadsheet ID: {args.spreadsheet_id}")
    print(f"üóÑÔ∏è  Database: {args.database_url.split('@')[-1]}")
    print(f"üß™ Dry run: {args.dry_run}")
    
    # === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
    print("\nüìù –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
    scope = [
        'https://spreadsheets.google.com/feeds',
        'https://www.googleapis.com/auth/drive'
    ]
    
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name(args.credentials, scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(args.spreadsheet_id)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ: {spreadsheet.title}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return
    
    # === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
    print("\nüóÑÔ∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
    try:
        engine = create_async_engine(args.database_url, echo=False)
        
        # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        AsyncSessionLocal = sessionmaker(
            engine, class_=AsyncSession, expire_on_commit=False
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return
    
    # === –ú–∏–≥—Ä–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤ ===
    worksheets = spreadsheet.worksheets()
    sheets_to_migrate = [ws for ws in worksheets if ws.title.startswith(args.sheet_prefix)]
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(sheets_to_migrate)}")
    print(f"   –õ–∏—Å—Ç—ã: {', '.join([ws.title for ws in sheets_to_migrate])}")
    
    if not sheets_to_migrate:
        print("‚ö†Ô∏è  –ù–µ—Ç –ª–∏—Å—Ç–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º", args.sheet_prefix)
        return
    
    total_stats = {
        'total': 0,
        'inserted': 0,
        'skipped': 0,
        'errors': 0
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
    for worksheet in sheets_to_migrate:
        async with AsyncSessionLocal() as session:
            stats = await migrate_sheet_to_db(worksheet, session, dry_run=args.dry_run)
            
            total_stats['total'] += stats['total']
            total_stats['inserted'] += stats['inserted']
            total_stats['skipped'] += stats['skipped']
            total_stats['errors'] += stats['errors']
    
    # === –ò—Ç–æ–≥–∏ ===
    print("\n" + "="*60)
    print("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("="*60)
    print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_stats['total']}")
    print(f"   ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {total_stats['inserted']}")
    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {total_stats['skipped']}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_stats['errors']}")
    
    if args.dry_run:
        print("\n‚ö†Ô∏è  DRY RUN —Ä–µ–∂–∏–º - –¥–∞–Ω–Ω—ã–µ –ù–ï –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
    
    # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await engine.dispose()


if __name__ == "__main__":
    asyncio.run(main())

