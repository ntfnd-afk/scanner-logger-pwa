import { useState, useMemo } from 'react';

export default function ExportNew({ events, stats, loading }) {
  const [exportFormat, setExportFormat] = useState('xlsx');

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const exportData = useMemo(() => {
    return events.map(event => ({
      '–î–∞—Ç–∞/–í—Ä–µ–º—è': event.ts,
      '–û–ø–µ—Ä–∞—Ç–æ—Ä': event.operator || '',
      '–¢–∏–ø': event.type,
      '–ö–ª–∏–µ–Ω—Ç': event.client || '',
      '–ì–æ—Ä–æ–¥': event.city || '',
      '–ö–æ—Ä–æ–±': event.box || '',
      '–ö–æ–¥': event.code || '',
      '–ò—Å—Ç–æ—á–Ω–∏–∫': event.source || 'pwa',
      '–î–µ—Ç–∞–ª–∏': event.details || ''
    }));
  }, [events]);

  const handleExport = () => {
    if (exportData.length === 0) {
      alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    if (exportFormat === 'xlsx') {
      exportToXLSX();
    } else {
      exportToCSV();
    }
  };

  const exportToXLSX = () => {
    // –î–ª—è XLSX –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ xlsx
    // –ü–æ–∫–∞ –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    alert('–≠–∫—Å–ø–æ—Ä—Ç –≤ XLSX –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.\n–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV.');
    exportToCSV();
  };

  const exportToCSV = () => {
    const headers = Object.keys(exportData[0]);
    const csvContent = [
      headers.join(';'),
      ...exportData.map(row => 
        headers.map(header => {
          const value = row[header];
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
          if (value && (value.includes(';') || value.includes('"') || value.includes('\n'))) {
            return `"${value.replace(/"/g, '""')}"`;
          }
          return value;
        }).join(';')
      )
    ].join('\n');

    // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ Excel
    const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.setAttribute('href', url);
    link.setAttribute('download', `scanner_export_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
  const stats_summary = useMemo(() => {
    const clients = new Set();
    const cities = new Set();
    const boxes = new Set();
    const operators = new Set();
    let items = 0;

    events.forEach(event => {
      if (event.client) clients.add(event.client);
      if (event.city) cities.add(event.city);
      if (event.box) boxes.add(event.box);
      if (event.operator) operators.add(event.operator);
      if (event.type === 'ITEM') items++;
    });

    return {
      clients: clients.size,
      cities: cities.size,
      boxes: boxes.size,
      operators: operators.size,
      items: items,
      total: events.length
    };
  }, [events]);

  if (loading && events.length === 0) {
    return <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  }

  return (
    <div className="export-new">
      <h2>üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h2>

      <div className="export-info">
        <div className="info-card">
          <div className="info-label">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</div>
          <div className="info-value">{stats_summary.total}</div>
        </div>
        <div className="info-card">
          <div className="info-label">–¢–æ–≤–∞—Ä–æ–≤</div>
          <div className="info-value">{stats_summary.items}</div>
        </div>
        <div className="info-card">
          <div className="info-label">–ö–æ—Ä–æ–±–æ–≤</div>
          <div className="info-value">{stats_summary.boxes}</div>
        </div>
        <div className="info-card">
          <div className="info-label">–ö–ª–∏–µ–Ω—Ç–æ–≤</div>
          <div className="info-value">{stats_summary.clients}</div>
        </div>
        <div className="info-card">
          <div className="info-label">–ì–æ—Ä–æ–¥–æ–≤</div>
          <div className="info-value">{stats_summary.cities}</div>
        </div>
        <div className="info-card">
          <div className="info-label">–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</div>
          <div className="info-value">{stats_summary.operators}</div>
        </div>
      </div>

      <div className="export-section">
        <h3>–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞</h3>
        <div className="format-selector">
          <label className="radio-option">
            <input
              type="radio"
              value="csv"
              checked={exportFormat === 'csv'}
              onChange={(e) => setExportFormat(e.target.value)}
            />
            <span>CSV (Excel)</span>
          </label>
          <label className="radio-option">
            <input
              type="radio"
              value="xlsx"
              checked={exportFormat === 'xlsx'}
              onChange={(e) => setExportFormat(e.target.value)}
            />
            <span>XLSX (Excel, —Ç—Ä–µ–±—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É)</span>
          </label>
        </div>
      </div>

      <div className="export-actions">
        <button 
          className="export-btn"
          onClick={handleExport}
          disabled={exportData.length === 0}
        >
          üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {exportFormat.toUpperCase()}
        </button>
        
        {exportData.length === 0 && (
          <div className="warning-message">
            –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.
          </div>
        )}
      </div>

      <div className="export-preview">
        <h3>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π)</h3>
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                <th>–î–∞—Ç–∞/–í—Ä–µ–º—è</th>
                <th>–û–ø–µ—Ä–∞—Ç–æ—Ä</th>
                <th>–¢–∏–ø</th>
                <th>–ö–ª–∏–µ–Ω—Ç</th>
                <th>–ì–æ—Ä–æ–¥</th>
                <th>–ö–æ—Ä–æ–±</th>
                <th>–ö–æ–¥</th>
              </tr>
            </thead>
            <tbody>
              {exportData.slice(0, 10).map((row, idx) => (
                <tr key={idx}>
                  <td>{row['–î–∞—Ç–∞/–í—Ä–µ–º—è']}</td>
                  <td>{row['–û–ø–µ—Ä–∞—Ç–æ—Ä']}</td>
                  <td>{row['–¢–∏–ø']}</td>
                  <td>{row['–ö–ª–∏–µ–Ω—Ç']}</td>
                  <td>{row['–ì–æ—Ä–æ–¥']}</td>
                  <td>{row['–ö–æ—Ä–æ–±']}</td>
                  <td>{row['–ö–æ–¥']}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        {exportData.length > 10 && (
          <div className="preview-note">
            ... –∏ –µ—â—ë {exportData.length - 10} –∑–∞–ø–∏—Å–µ–π
          </div>
        )}
      </div>
    </div>
  );
}

